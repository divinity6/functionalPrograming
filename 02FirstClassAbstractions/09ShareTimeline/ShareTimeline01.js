/**
 * 프로그람 설명문서 주석
 * 2022.07. 03
 *
 *
 *           ===== 좋은 타임라인의 원칙 =====
 *
 *      1. 타임라인은 적을수록 이해하기 쉽다
 *
 *      2. 타임라인은 짧을수록 이해하기 쉽다
 *
 *      3. 공유하는 자원이 적을수록 이해하기 쉽다
 *
 *      4. 자원을 공유한다면 서로 조율해야 한다
 *
 *      5. 시간을 일급으로 다룬다
 *
 *
 *      - DOM 자원을 공유하면 버그가 발생하기 쉽다
 *        ( DOM 을 업데이트하는 액션을 실행할때 가능한 순서 )
 *      --> 자원을 공유하지 않는다면 실행순서를 신경쓰지 않아도 된다
 *
 */

/**
 *           ===== DOM 이 업데이트되는 순서를 보장해야 한다 =====
 *
 *      - 특정 순서로 DOM 이 업데이트되어야 문제가 없다
 *
 *      --> 업데이트 순서를 제한해야 먼저실행되는 것을 막을 수 있다
 *
 *      @큐 : queue
 *
 *      - 큐는 들어온 순서대로 나오는 데이터 구조다
 *
 *      --> 큐는 여러 타임라인에 있는 액션 순서를 조율하기 위해 많이 사용한다
 *
 *      --> 큐는 공유자원이지만 안전하게 공유된다
 *
 *      --> 또한, 큐에 있는 모든 작업은 같은 타임라인에서 처리되기 때문에
 *          순서가 관리된다
 */

/**
 *           ===== JS 에서 queue 맨들기 =====
 *
 *      - js 에는 queue 자료 구조가 없기 때문에 맨들어야 한다
 *
 *      --> 큐는 자료구조이지만, 타임라인 조율에 사용한다면
 *          동시성 기본형( concurrency primitive )라고 부른다
 *
 *      --> 동시성 기본형은 자원을 안전하게 공유할 수 있는 재사용한 코드를 말한다
 *
 *      ----> 동시성 기본형을 기본적으로 제공하는 언어도 있다
 *            ( 하지만 자바스크립트에는 없기 때문에 직접 맨들어야 한다 )
 *
 *      - 가능한 많은 작업들을 queue 가 아닌, 핸들러에서 하는 것이 좋다
 *      --> 핸들러는 다른 작업이 끼어들 수 없어서 순서가 섞일 염려가 없다
 */

title( '타임라인 공유하기' );
{
}
