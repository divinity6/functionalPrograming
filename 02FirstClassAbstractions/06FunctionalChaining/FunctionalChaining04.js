/**
 * 프로그람 설명문서 주석
 * 2022.06. 06
 *
 *
 *           ===== 함수형 체이닝으로 리팩터링 =====
 *
 *      - 기존에 있던 반복문을 함수형 도구로 리팩터링해야할떼
 *
 *      @이해하고다시만들기
 *      --> 단순히 반복문을 읽고 어떤 일을 하는지 파악 후 구현을 잊어버리고 다시 맨드는 것
 *
 *      @단서를찾아리팩터링
 *      --> 기존 코드를 잘 이해할 수도 있지만 이해하기 힘든 경우,
 *          반복문을 하나씩 선택한 후 함수형 도구 체인으로 바꾸면 된다
 *
 *
 *      - 아... 일단 리팩터링 하려면, 해당기능이 어떻게 동작하는지 대략적으로 파악해야겠네...
 *
 *      @리팩터링팁
 *      1. 데이터 맨들기
 *      2. 배열 전체를 다루기
 *      3. 작은 단계로 나누기
 */

title( '기존의 더러운 코드' );
{

    try {
        var answer = []; // answer 는 반복문 안에서 결과가 완성되는 배열
        var window2 = 5;

        for ( var i = 0; i < array.length; i++ ){ // 바깥쪽 배열은 배열 갯수만큼 반복
            var sum = 0;
            var count = 0;

            for ( var w = 0; w < window2; w++ ){ // 안쪽 배열은 0~4 까지 작은 구간 반복
                var idx = i + w;    // 새로운 인덱스를 계산한다
                if ( idx < array.length ){
                    sum += array[ idx ];
                    count += 1;     // 어떤 값을 누적한다
                }
            }
            answer.push( sum / count ); // answer 배열에 값을 추가한다
        }

    }
    catch( e ){
        console.log( '기존의 더러운 코드 연습용입니다' );
    }

    /**
     *  - 코드를 전부 이해하지 않아도 작게 쪼갤 수 있다.
     *    ( 단서가 많이 있다 )
     *
     *  1. 바깥쪽 배열 : answer 에 원래 배열의 크기만큼 추가( map 사용 가능 )
     *
     *  2. 안쪽 배열 : 각 항목을 하나의 값으로 맨들고 있음( reduce 사용 가능 )
     *  --> 안쪽 배열이 리팩터링을 시작하기 좋은 위치
     */
}



/**
 *           ===== 데이터 맨들기 =====
 *
 *      - 데이터를 배열에 넣으면 함수형 도구를 사용할 수 있다
 *
 *      - 위 코드에서
 *
 *      --> w : 0부터 window2 - 1 까지 바뀌지만
 *              배열에 들어있는 값은 아니다
 *
 *      --> idx : i 부터 i + window2 - 1 까지 바뀌지만
 *                배열로 맨들지 않는다
 *
 *      -->  array[ idx ] : 배열에 있는 작은 범위의 값이지만 배열로
 *                          따로 맨들지 않았다
 *
 *
 *      - 안쪽 반복문은 array 에 있는 어떤 값들 중 어떤 범위의 값을 반복한다
 *      --> 만약, 이 범위의 값을 배열로 맨들어 반복하면 어떻게 될까?
 */
title( 'slice() 메서드 이용' );
{
    try {
        var answer = [];
        var window2 = 5;

        for ( var i = 0; i < array.length; i++ ){
            var sum = 0;
            var count = 0;

            // 아... array.length 까지밖에 반복을 안하니깐 거기까지 slice 로 짤라낸거구나
            var subarray = array.slice( i , i + window2 ); // 하위 배열로 맨든다

            for ( var w = 0; w < subarray.length; w++ ){ // 그리고 반복문으로 배열을 반복한다
                sum += subarray[ w ];
                count += 1;
            }
            answer.push( sum / count ); // answer 배열에 값을 추가한다
        }

    }
    catch( e ){
        console.log( '기존의 더러운 코드 연습용입니다' );
    }

    /**
     *      - 아... 어짜피 idx 는 array.length 보다 작을때만
     *        동작하고, w 는 무조건 5번 도니깐,
     *
     *      --> w 와 idx , 인덱스를 맨드는 부분을 하나로 합쳐버린거네
     *          ( w 는 i 값에 따라 계속 증가하기 때문에 i 부터 slice 하면 끝이지... )
     *
     *      --> 그리고 array 에서 직접 찾아 계산을 하는게 아니라,
     *          새로운 배열에 담은부분에서 찾아서 계산하는구나
     */
}

/**
 *           ===== 한 번에 전체 배열을 조작하기 =====
 *
 *      - 하위 배열을 맨들었기 때문에 일부 배열이 아닌 배열 전체를 반복할 수 있다
 *
 *      - p334
 */
