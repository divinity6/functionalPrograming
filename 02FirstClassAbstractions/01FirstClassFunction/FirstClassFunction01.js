/**
 * 프로그람 설명문서 주석
 * 2022.06. 05
 *
 *
 *           ===== 일급 함수( First-class Function ) =====
 *
 *      --> 이번 장에서 다룰 내용 요약
 *
 *      @코드의냄새 : 함수 이름에 있는 암묵적 인자
 *      - 일급 값으로 바꾸면 표현력이 더 좋아진다
 *      --> 함수 이름에 있는 암묵적 인자( implicit argument in function name )는
 *          코드의 냄새가 된다
 *
 *      1. 거의 똑같이 구현된 함수가 있다
 *      2. 함수 이름이 구현에 있는 다른 부분을 가르킨다
 *
 *      @리팩터링 : 암묵적 인자를 드러내기
 *      - 암묵적 인자를 어떻게 명시적인 함수 인자로 바꿀 수 있을까?
 *      --> 암묵적 인자를 드러내기( express implicit argument ) 리팩터링은
 *          암묵적 인자가 일급 값이 되도록 함수에 인자를 추가한다
 *          ( 잠재적 중복을 없애고 코드의 목적을 더 잘 표현할 수 있다 )
 *
 *      1. 함수 이름에 있는 암묵적 인자를 확인한다
 *      2. 명시적인 인자를 추가한다
 *      3. 함수 본문에 하드 코딩된 값을 새로운 인자로 바꿔준다
 *      4. 함수를 호출하는 곳을 고친다
 *
 *      @리팩터링 : 함수 본문을 콜백으로 바꾸기
 *      - 언어 문법 중 어떤 문법은 일급이 아니다
 *      --> 함수 본문을 콜백으로 바꾸기( replace body with callback ) 리팩터링으로
 *          함수 본문에 어떤 부분( 비슷한 함수에 있는 서로 다른 부분 )을 콜백으로 바꾼다
 *
 *      ----> 원래 있던 코드를 고차 함수로 맨드는 강력한 방법
 *
 *      1. 함수 본문에서 바꿀 부분의 앞부분과 뒷부분을 확인한다
 *      2. 리팩터링할 코드를 함수로 빼낸다
 *      3. 빼낸 함수의 인자로 넘길 부분을 또 다른 함수로 빼낸다
 */
title( '일급함수' );
{
}