/**
 * 프로그람 설명문서 주석
 * 2022.07. 03
 *
 *
 *           ===== 좋은 타임라인의 원칙 =====
 *
 *      - 좋은 타임라인의 원칙은 코드를 개선하거나,
 *        더 이해하기 쉬운코드를 맨드는데 도움이 된다
 *
 *      --> 실행가능한 순서가 많으면 시스템을 이해하기 어렵다
 *
 *      1. 타임라인은 적을수록 이해하기 쉽다
 *
 *      - 타임라인이 하나인 시스템이 가장 이해하기 쉽다
 *
 *      --> 모든 액션은 앞의 액션 다음에 바로 실행된다
 *
 *      --> 새로운 타임라인은 항상 시스템을 이해하기 어렵게 맨든다
 *
 *      --> 타임라인 수를 줄이면 훨씬 이해하기 쉬운 시스템이 된다
 *
 *      2. 타임라인은 짧을수록 이해하기 쉽다
 *
 *      - 타임라인의 단계가 적을수록 이해하기 쉽다
 *
 *      3. 공유하는 자원이 적을수록 이해하기 쉽다
 *
 *      - 서로 다른 타임라인에 있는 두 액션이 서로 자원을 공유하지 않는다면,
 *        실행순서에 신경 쓸 필요가 없다
 *
 *      --> 실행가능한 순서의 개수가 줄어들지는 않지만,
 *          신경써야할 실행 가능한 순서를 줄일 수 있다
 *
 *      4. 자원을 공유한다면, 서로 조율해야 한다
 *
 *      - 타임라인은 공유자원을 서로 안전하게 공유할 수 있어야 한다
 *
 *      --> 올바른 순서대로 자원을 쓰고, 돌려준다는 뜻.
 *          ( 타임라인간 조율은 올바른 결과를 주지 않는 실행 순서를 없애는 것 )
 *
 *      5. 시간을 일급으로 다룬다
 *
 *      - 액션의 순서와 타이밍을 맞추는 것은 어렵다
 *
 *      --> 재사용한 객체를 맨들게 되면, 타이밍 문제를 쉽게 맨들수 있다
 *
 */

/**
 *           ===== JS 의 단일 스레드 =====
 *
 *      - JS 의 스레드 모델은 타임라인이 자원을 공유하면서 생기는 문제를 줄여준다
 *
 *      --> JS 는 하나의 메인 스레드만 있어서, 대부분의 액션을 하나의 박스로
 *          표현할 수 있다
 *
 *      --> 두개의 액션이 동시에 실행될 일이 없다
 *
 *      ----> 하지만, 비동기 콜백을 사용하면 문제가 생길 수 있다
 *            ( JS 에서 어떤 동작이 동기인지, 비동기인지 아는 것은 중요하다 )
 */

/**
 *           ===== JS 의 비동기 큐 =====
 *
 *      - 브라우저의 JS 엔진은 작업 큐( job queue )를 가지고 있다
 *
 *      - 작업 큐는 이벤트 루프( event loop ) 스레드에 의해 처리된다
 *
 *      --> 이벤트 루프는 큐에서 작업 하나를 꺼내 완료되면 다음 작업을
 *          꺼내 실행하는 것을 무한히 반복한다
 *
 *      --> 이벤트 루프는 하나의 스레드에서 처리하기 때문에 두개의 작업이
 *          동시에 실행될 수 없다
 *
 *
 *      1. 작업이란 무엇인가?
 *
 *      - 작업 큐에 있는 작업은 이벤트 데이터와 이벤트를 처리할 콜백으로 구성되어 있다
 *
 *      --> 이벤트 루프는 이벤트 데이터를 인자로 콜백을 부른다
 *          ( 콜백 === 이벤트 루프가 실행할 함수 )
 *
 *      --> 이벤트 루프는 단순히 첫 번째 인자에 이벤트 데이터를 넣어 콜백 함수를 실행한다
 *
 *      2. 작업은 큐에 어떻게 들어가는가?
 *
 *      - 이벤트가 발생하면 큐에 작업이 추가된다
 *
 *      --> 이벤트는 마우스 클릭, 키보드 입력, AJAX 이벤트등
 *
 *      --> 만약, 콜백 함수가 있는 버튼에 이벤트가 발생하면 이벤트 데이터( 클릭 정보 )와
 *          콜백 함수가 큐에 추가된다
 *
 *      ----> 마우스 클릭등 어떤 이벤트도 예상할 수 없기 때문에
 *            예측 불가능한( unpredictably )시점에 작업 큐에 들어간다
 *
 *      ----> 들어간 작업은 작업 큐에서 나중에 온전히 가져온다
 *
 *      3. 작업이 없을때 엔진은 무엇을 하는가?
 *
 *      - 처리할 작업이 없을 경우, 이벤트 루프는 대기상태로 들어가고 전원을 아낀다
 *        ( 또는 가비지 컬렉션같은 관리작업을 하기도 한다 )
 *
 *      --> 이것은 브라우저 개발자에게 달려있다
 */

/**
 *           ===== AJAX 와 이벤트 큐 =====
 *
 *      - AJAX 는 브라우저에 기반을 둔 웹 요청
 *        ( Asynchronous Javascript And XML )의 약자이다
 *
 *      - JS 에서 AJAX 요청을 맨들면 네트워크 엔진이
 *        AJAX 요청을 처리하기 위해 요청 큐에 넣는다
 *
 *      - 요청 큐에 작업이 추가되어도 코드는 계속 실행된다
 *        ( 요청이 완료될 때까지 기다릴 필요가 없다 )
 *
 *      --> JS 에서 AJAX 를 사용하는 부분은 비동기( asynchronous )이다
 *      --> 네트워크 환경은 예측할 수 없기 때문에 요청 순서대로 오지 않는다
 *
 *      - AJAX 콜백도 요청 순서와 상관없이 작업 큐에 들어간다
 *
 *      --> AJAX 요청을 맨들 때, 요청에 관련된 다양한 이벤트를 콜백에 등록할
 *          수 있다.
 *          ( 요청이 처리되는 동안, 네트워크 엔진에 의해 다양한 이벤트가 발생한다 )
 */

/**
 *           ===== 완성된 타임라인 =====
 *
 *      - 타임라인 다이어그램으로 가능한 액션의 순서를 알 수 있다
 *
 *      --> 실행순서를 이해하면 코드가 제대로 동작하는지 알 수 있다
 *          ( 잘 동작하지 않는 실행 순서를 알면 버그를 찾을 수 있고,
 *            잘 동작하는 순서를 알면 코드가 올바르다는 것을 알 수 있다 )
 *
 *      - JS 는 스레드 하나에서 실행되기 때문에, 동시에 실행되는 일은 없다
 *
 *      ----> 따라서, 어떤 AJAX 응답이 먼저 오는가에 따라 실행 순서가 달라진다
 */
title( 'JS 의 타임라인' );{

}