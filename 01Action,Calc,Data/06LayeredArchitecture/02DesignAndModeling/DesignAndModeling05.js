/**
 * 프로그람 설명문서 주석
 * 2022.05. 29
 *
 *
 *           ===== 직접 구현 =====
 *
 *      1. 직접 구현한 코드는 한 단계의 구체화 수준에 관한 문제만 해결한다
 *      --> 서로 다른 구체화 단계에 있다면 읽기 어렵다
 *      --> 직접 구현시 코드를 읽기 위해 알아야 하는 구체화 단계를 줄일 수 있다
 *
 *      2. 계층형 설계는 특정 구체화 단계에 집중할 수 있게 도와준다
 *      --> 코드에 있는 다양한 단서를 통해 구체화 수준에 집중하면,
 *          설계 감각을 키울 수 있다
 *
 *      3. 호출 그래프는 구체화 단계에 풍부한 단서를 보여준다
 *      --> 큰 그림으로 설계를 개선하기에는 너무 많은 정보가 있다
 *          호출 그래프는 함수가 서로 어떻게 연결되어 있는지 보여준다
 *
 *      4. 함수를 추출하면 더 일반적인 함수로 맨들 수 있다
 *      --> 함수가 더 구체적인 내용을 다루지 않도록 일반적인 함수로 빼내는 것
 *      --> 일반적인 함수는 구체적인 내용을 하나만 다루기 때문에 테스트가 쉽다
 *
 *      5. 일반적인 함수가 많을수록 재사용하기 쉽다
 *      --> '중복 코드'를 찾기 위해 함수를 빼내는 것과는 다르다
 *      --> 구현을 명확하게 하기 위해 일반적인 함수를 빼내는 것이다
 *          ( 사용할 곳을 따로 찾지 않아도 재사용할 수 있다 )
 *
 *      6. 복잡성을 감추지 않는다
 *      --> 명확하지 않은 코드를 감추기 위해 도우미 함수( helper function)을
 *          맨들게 되면 계층형 설계가 아니다
 *
 *      ----> 계층형 설계에서는 모든 계층은 바로 아래 계층에 의존해야 한다
 *
 *      ----> 더 낮은 구체화 수준을 가진 일반적인 함수로 만들어 직접 구현 패턴을
 *            적용해야 한다
 *
 */

/**
 *           ===== 정리 =====
 *
 *      - 계층형 설계는 코드를 추상화 계충으로 구성한다
 *        ( 다른 계층의 구체적인 내용은 몰라도 된다 )
 *
 *      - 함수를 구현할 때 어떤 구체화 단계로 쓸지 결정하는 것이 중요하다
 *
 *      - 함수 이름은 의도를 알려준다
 *        ( 비슷한 목적의 이름을 가진 함수를 함께 묶을 수 있다 )
 *
 *      - 함수 본문은 함수가 어떤 계층구조에 있어야 하는지 알려준다
 *
 *      - 호출 그래프의 화살표가 다양한 길이를 가지고 있다면,
 *        직접 구현되어 있지 않다는 신호다
 */
title( '직접 구현 정리' );
{

}