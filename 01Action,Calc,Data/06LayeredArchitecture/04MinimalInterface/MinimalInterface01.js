/**
 * 프로그람 설명문서 주석
 * 2022.05. 29
 *
 *
 *           ===== 작은 인터페이스( minimal interface ) =====
 *
 *      - 인터페이스 패턴은 새로운 코드를 추가할 위치에 관한 것이다
 *      --> 인터페이스를 최소화하면 하위 계층에 불필요한 기능이 쓸데없이
 *          커지는 것을 막을 수 있다
 *
 *      - 해당 함수가 어디에 들어갈지를 고민하고 결정해야 한다.
 *
 *      - 새로운 기능을 추가할 때, 하위 계층에 기능을 추가하거나 고치는 것 보다,
 *        상위 계층에 맨드는 것이 작은 인터페이스 패턴이다!!
 *
 *      --> 하위 계층은 고치지 않고, 상위 계층에서 문제를 해결하는 것!
 *      ----> 이 패턴은 모든 계층에 적용할 수 있는 패턴이다!!
 *
 *      - 위치를 결정하는데 가장 중요한 요소는 인터페이스를 깔끔하게 유지하는 것이다
 *
 *      --> 단순하고 믿을 수 있는 인터페이스에 집중할 수 있다
 */

title( '장바구니를 객체로 다시 만들기' );
{

    function objectSet( object , key , value ){
        return Object.assign( {} , object )[ key ] = value;
    }
}
/**
 *           ===== 정리 =====
 *
 *      - 추상화의 벽에 만든 함수는 인터페이스라고 생각할 수 있다
 *      --> 추상화의 벽에 있는 인터페이스로 어떤 값의 집합에 접근하거나 값을 조작할 수 있다
 *
 *      - 추상화의 벽을 작게 만들어야 하는 이유
 *
 *      1. 추상화의 벽에 코드가 많을수록 구현이 변경되었을 때, 고쳐야 할 것이 많다
 *
 *      2. 추상화 벽에 있는 코드는 낮은 수준의 코드이기 때문에 더 많은 버그가 있을 수 있다
 *
 *      3. 낮은 수준의 코드는 이해하기 더 어렵다
 *
 *      4. 추상화 벽에 코드가 많을수록 팀 간에 조율해야 할 것도 많아진다
 *
 *      5. 추상화 벽에 인터페이스가 많으면 알아야 할 것이 많아 사용하기 어렵다
 *
 *      - 상위 계층에 어떤 함수를 맨들 때, 가능한 현재 계층에 있는 함수로 구현하는 것이
 *        작은 인터페이스를 실천하는 것이다
 *
 *      --> 일반적으로 상위 계층에 구현하는 것이 좋다
 *
 *      - 이상적인 계층은 더도, 덜도 아닌 필요한 함수만 가지고 있어야 한다
 *
 *      --> 호출 그래프 하위 계층에 작고 강력한 동작들을 맨들 때 이런 모습들을 볼 수 있다
 *
 */