/**
 * 프로그람 설명문서 주석
 * 2022.05. 28
 *
 *
 *           ===== 모든 동작을 불변형으로 바꿀 수 있는가? =====
 *
 *      - 중첩( nested )
 *      --> 데이터 구조안에 데이터 구조가 들어가 있는 것
 *          예) 배열안에 객체가 들어가 있는 경우
 *
 *      --> 깊이 중첨( deeply nested )
 *          중첩이 계속 이어지는 것
 *
 *      - 장바구니에 대한 동작
 *
 *      1. 제품 개수 가져오기
 *
 *      2. 제품 이름으로 제품 가져오기
 *
 *      3. 제품 추가하기
 *
 *      4. 제품 이름으로 제품 빼기
 *
 *      5. 제품 이름으로 제품 구매 수량 바꾸기
 *
 *
 *      - 제품에 대한 동작
 *
 *      1. 가격 설정하기
 *
 *      2. 가격 가져오기
 *
 *      3. 이름 가져오기
 *
 *      ----> 중첩된 데이터( nested data )에 어떻게 하면 불변 동작을 구현할 수 있을까?
 */

/**
 *           ===== 동작을 분류하기 =====
 *
 *      - 읽기( read )
 *      --> 데이터를 바꾸지 않고 정보를 꺼내는 것
 *      ----> 인자에 의존해 정보를 가져온다면 계산으로 볼 수 있다
 *
 *      - 쓰기( write )
 *      --> 데이터를 변경함
 *      ----> 변경되는 값은 어디서 사용될지 모르니 바뀌지 않도록 원칙이 필요하다
 */

/**
 *           ===== 카피-온-라이트( copy-on-write ) =====
 *
 *      - 읽기와 달리 쓰기는 불변성 원칙에 따라 구현해야 한다
 *      --> 카피-온-라이트라고 한다
 *      --> JS 는 기본적으로 변경가능한 데이터 구조를 사용하기 때문에
 *          불변성 원칙을 적용하려면 직접 구현해야 한다
 *
 *      - 원칙 3가지
 *
 *      1. 복사본 맨들기
 *
 *      2. 복사본 변경하기( 원하는 만큼 )
 *
 *      3. 복사본 리턴하기
 *
 *      ----> 읽기를 쓰기로 바꿀수 있다
 *
 *      - 아래 add_element_last() 함수는
 *
 *      1. 기존 배열을 건드리지 않음
 *
 *      2. 복사본은 함수 내부에 있어서 다른곳에서 값을 바꾸기 위해
 *         접근할 수 없음
 *
 *      3. 복사본을 변경하고 함수를 나감.( 이후에 변경 불가 )
 *
 *      --> 기존 값을 바꾸지 않았기 때문에 읽기이다
 *          ( 쓰기를 읽기로 바꾼 것 )
 */


title( '카피-온-라이트( copy-on-write )' );
{
    function add_element_last( array , elem ){ // C
        var new_array = array.slice();
        new_array.push( elem );
        return new_array;
    }
}
