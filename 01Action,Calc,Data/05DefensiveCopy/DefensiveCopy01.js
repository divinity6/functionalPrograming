/**
 * 프로그람 설명문서 주석
 * 2022.05. 28
 *
 *
 *           ===== 모든 동작을 불변형으로 바꿀 수 있는가? =====
 *
 *      - 레거시 코드( legacy code )
 *      --> 오래전에 만든 것으로 지금 당장 고칠 수 없어서 그대로 사용해야 하는 코드
 *
 *      - 안전성이 없는 코드는 신뢰성이 없다
 *      --> 오래전에 작성한 레거시 코드와 상호작용 해야할 때가 있다
 *      --> 따라서, 불변성을 지키면서 데이터를 주고받아야하는 방법을 찾아야 한다
 *
 */

/**
 *           ===== 복사본을 맨듬 =====
 *
 *      - 신뢰할 수 없는 코드와 데이터를 주고받을때는 깊은 복사를 이용하고
 *        원본 데이터는 버리는 것
 *
 *      --> 데이터가 들어올때, 나갈때 둘다 깊은 복사를 해서 받고, 내보내고 하는 것!
 *
 */

/**
 *           ===== 방어적 복사의 규칙 =====
 *
 *      1. 데이터가 안전한 코드에서 나갈 때 복사하기
 *
 *      2. 안전한 코드로 데이터가 들어올 때 복사하기
 *
 *      - 이 두가지 규칙은 순서에 상관없이 사용할 수 있다
 *
 *      --> 신뢰할 수 없는 코드를 wrapper 함수를 맨들어 감싸고 깊은 복사
 *          코드 자체를 넣어두면 된다
 *          ( 거기에 깊은 복사를 하는 방어적 코드를 짜두면 수월하다 )
 */

title( '방어적 복사' );
{
    try {
        function payrollCalcSafe( employees ){
            var _employees = deepCopy( employees ).payrollCalc( _employees );
            return  deepCopy( _employees )
        }

        userChanges.subscribe( function( user ){
            processUser( _.deepClone( user ) ); // 안전한 코드

        } )
    }
    catch( e ){
        console.log( '선언을 안해놧어용' )
    }
}
/**
 *      - API 들은 기본적으로 방어적 복사를 사용한다
 *
 *      --> 방어적 복사( 깊은 복사 )는 위아래 중첩된 데이터 모두를 복사하기 때문에
 *          더 많은 비용이 든다. 따라서 연산과 메모리 낭비를 하지 않으려면
 *          가능한 안전 지대에서는 카피-온-라이트를 사용하는 것이 좋다
 */

/**
 *
 *           ===== 카피-온-라이트 =====
 *
 *     ----------------------------------------------------------------
 *
 *     - 언제쓰는가                   - 통제할 수 있는 데이터를 바꿀 때
 *
 *     - 어디서 쓰는가                - 안전지대 어디서나,
 *                                   카피-온-라이트가 불변성을 가진 안전지대를 만듬
 *
 *     - 복사 방식                   - 얕은 복사( 비용이 적게 든다 )
 *
 *     - 규칙                       - 1. 바꿀 데이터의 얕은 복사를 맨듬
 *                                   2. 복사본을 변경함
 *                                   3. 복사본을 리턴함
 *
 *     ----------------------------------------------------------------
 */

/**
 *
 *           ===== 방어적 복사 =====
 *
 *     ----------------------------------------------------------------
 *
 *     - 언제쓰는가                   - 신뢰할 수 없는 코드와 데이터를 주고 받아야할때
 *
 *     - 어디서 쓰는가                - 안전지대 경계에서 데이터가 오갈때
 *
 *     - 복사 방식                   - 깊은 복사( 비용이 많이 든다 )
 *
 *     - 규칙                       - 1. 안전지대로 들어오는 데이터에 깊은 복사
 *                                   2. 안전지대를 나가는 데이터에 깊은 복사
 *
 *     ----------------------------------------------------------------
 */

/**
 *      - 깊은 복사는 상대적으로 비용이 비싸기 때문에
 *        카피-온-라이트를 사용할 수 없는 곳에서만 사용해야 한다
 *
 *      - lodash
 *      --> _.clone() :: 얕은 복사
 *      --> _.cloneDeep() :: 깊은 복사
 *
 *      - 아, 즉, 모듈안에서는 얕은 복사로 서로 공유하고
 *
 *      - 외부 모듈로 나갈때는 깊은 복사로 내보내고 하면 되겠구나!!
 *
 */