/**
 * 프로그람 설명문서 주석
 * 2022.05. 23
 *
 *
 *           ===== 액션과 계산 데이터 =====
 *
 *      --> 다시 강조하네 ㅋㅋ
 *
 *      - 액션
 *      --> 호출 횟수 및 시점에 의존
 *
 *      - 계산
 *      --> 결정 및 계획등
 *          ( 실행해도 다른 곳에 영향을 주지 않음 )
 *
 *      - 데이터
 *      --> 불변( immutable )
 */

/**
 *           ===== 계층화 설계 =====
 *
 *      - 비즈니스 규칙, 도메인 규칙 , 기술 스택 계층
 *
 *      - 맨 아래 코드들은 의존성이 많아 바꾸기 어렵지만
 *        자주 바뀌지 않음
 *
 *      - 맨 위의 코드는 의존성이 거의 없어 쉽게 바꿀 수 있음
 *
 */

/**
 *           ===== 일급 추상 =====
 *
 *      - 액션은 실행시점에 의존...( 오키알았어 ㅋㅋㅋ 몇번을 말함 )
 *
 *      - 분산시스템
 *        ( 분산 시스템에서 독립된 액션의 실행순서는 어떻게 될지 모름 )
 *
 *      - 타임라인은 서로 순서를 맞출 수 있는 기능이 없음
 *        ( 타임라인은 시간에 의존하기 때문에 모든것이 액션임 )
 *      --> 따라서, 타임라인의 액션 간 실행 순서는 보장할 수 없음
 *
 *      - 타임라인을 맞추지 않은 분산시스템은 에측 불가능한 순서로 실행됨
 *
 *      --> 따라서, 타임라인은 서로 실행 순서를 맞춰야 한다
 *
 *      --> 각각의 타임라인은 다른 타임라인의 순서와 관계없이 맨들어야 함
 *
 *      --> 타임라인은 항상 올바른 결과를 보장해야 함
 */

/**
 *           ===== 타임라인 커팅 =====
 *
 *      - 타임라인은 서로 순서를 맞추는 기능이 없기 때문에
 *        커팅( cutting )이라는 기술 사용
 *
 *      --> 여러 타임라인이 동시에 진행될 때 서로 순서를 맞추는 방법
 *
 *      - 고차동작( 고차 함수로 맨든 동작 ) :
 *      --> 각 타임라인은 동립적으로 동작하고, 작업이 완료되면 다른
 *          타임라인이 끝나기를 기다림
 */

/**
 *           ===== 정리 =====
 *
 *      1. 액션, 계산, 데이터를 구분하는 것
 *
 *      2. 계층형 설계
 *         ( 각 계층은 코드의 변경 가능성에 따라 나눔 )
 *
 *      3. 타임라인 다이어그램
 *        ( 시간에 따라 변하는 액션을 시각화하는 방법 )
 *
 *      4. 타임라인 커팅
 *        ( 액션이 올바른 순서로 실행하도록 보장 )
 *
 */

title('dsfsdf');
debugger;